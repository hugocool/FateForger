[project]
name = "admonish"
version = "0.1.0"
description = "does the productivity for you"
authors = [
    {name = "hugocool",email = "hugo.evers@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "slack-bolt (>=1.23.0,<2.0.0)",
    "slack-sdk (>=3.36.0,<4.0.0)",
    "aiohttp (>=3.8.0,<4.0.0)",
    "fastapi (>=0.116.1,<0.117.0)",
    "python-dotenv (>=1.1.1,<2.0.0)",
    "apscheduler (>=3.11.0,<4.0.0)",
    "uvicorn[standard] (>=0.32.1,<0.33.0)",
    "tenacity (>=9.1.2,<10.0.0)",
    "autogen-agentchat (>=0.6.4,<0.7.0)",
    "autogen-ext[mcp] (>=0.6.4,<0.7.0)",
    "openai (>=1.0.0,<2.0.0)",
    "tiktoken (>=0.5.0,<1.0.0)",
    "sqlalchemy[asyncio] (>=2.0.0,<3.0.0)",
    "aiosqlite (>=0.19.0,<1.0.0)",
    "alembic (>=1.10.0,<2.0.0)",
    "httpx (>=0.25.0,<1.0.0)",
    "pydantic (>=2.0.0,<3.0.0)",
    "pydantic-settings (>=2.0.0,<3.0.0)",
    "python-dateutil (>=2.8.0,<3.0.0)",
    "jinja2 (>=3.1.6,<4.0.0)"
]

[project.scripts]
plan = "productivity_bot.planner_bot:main"
haunt = "productivity_bot.haunter_bot:main"
watch = "productivity_bot.calendar_watch_server:main"

[tool.poetry]
name = "admonish"
version = "0.1.0"
description = "does the productivity for you"
authors = ["hugocool <hugo.evers@gmail.com>"]
packages = [
    {include = "productivity_bot", from = "src"},
    {include = "scripts"}
]

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-mock = "^3.14.1"
pytest-asyncio = "^0.21.0"
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.15"
mkdocstrings = "^0.29.1"
mkdocs-autorefs = "^1.4.2"
mkdocs-macros-plugin = "^1.3.7"
pymdown-extensions = "^10.16"
mkdocstrings-python = "^1.16.12"
flake8 = "^7.3.0"
mypy = "^1.17.0"

[tool.poetry.scripts]
plan = "productivity_bot.planner_bot:main"
haunt = "productivity_bot.haunter_bot:main"
watch = "productivity_bot.calendar_watch_server:main"

# Docker and infrastructure management scripts
mcp-build = "scripts.docker_utils:build_mcp_server"
mcp-start = "scripts.docker_utils:start_mcp_server"
mcp-stop = "scripts.docker_utils:stop_mcp_server"
mcp-logs = "scripts.docker_utils:mcp_logs"
infra-up = "scripts.docker_utils:start_all_services"
infra-down = "scripts.docker_utils:stop_all_services"
dev-setup = "scripts.dev_utils:setup_development_environment"


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "slack_bolt.*",
    "apscheduler.*",
    "httpx.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
