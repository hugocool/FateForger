version: "3.9"

# Base configuration for TickTick services
x-ticktick-base: &ticktick-base
  build:
    context: https://github.com/alexarevalo9/ticktick-mcp-server.git#main
    dockerfile: Dockerfile
  image: myorg/ticktick-mcp:alex
  working_dir: /app
  environment:
    TICKTICK_CLIENT_ID: ${TICKTICK_CLIENT_ID}
    TICKTICK_CLIENT_SECRET: ${TICKTICK_CLIENT_SECRET}
  volumes:
    - ticktick-mcp-env:/app/.env     # shared .env for persisted credentials

services:
  # Google Calendar MCP Service (using upstream Dockerfile)
  calendar-mcp:
    # ───────────────────────────────────────────────
    # Build directly from the GitHub repo @ tag
    build:
      context: https://github.com/nspady/google-calendar-mcp.git#${MCP_VERSION}
      dockerfile: Dockerfile          # the one in the repo root
    image: myorg/calendar-mcp:${MCP_VERSION}
    # ───────────────────────────────────────────────
    
    container_name: google-calendar-mcp
    env_file:
      - ../.env  # Use the main .env file from project root (relative to docker-compose.yml)
    # mount your OAuth JSON (or use secrets)
    volumes:
      - type: bind
        source: ../secrets/gcal-oauth.json
        target: /app/gcp-oauth.keys.json
        read_only: true
      - calendar-mcp-tokens:/home/node/.config/google-calendar-mcp
    
    ports:
      - "${PORT}:${PORT}"
      - "3500:3500"  # OAuth authentication server port
    environment:
      TRANSPORT: "${TRANSPORT}"
      PORT: "${PORT}"
      GOOGLE_OAUTH_CREDENTIALS: "/app/gcp-oauth.keys.json"
      HOST: "0.0.0.0"
    
    networks:
      - admonish-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3

  # TickTick MCP Services (using alexarevalo9/ticktick-mcp-server)
  
  # OAuth bootstrapper: run once (interactive) to get TICKTICK_ACCESS_TOKEN
  ticktick-auth:
    <<: *ticktick-base
    command: ["npm", "run", "start:auth"]  # triggers the CLI that opens browser and writes access token to .env
    ports:
      - "8000:8000"    # callback redirect URI must be http://localhost:8000/callback
    stdin_open: true    # allow interactive approval if attached
    tty: true
    restart: "no"       # one-off service
    profiles: ["setup"]
    networks:
      - admonish-network

  # MCP server, depends on auth having populated the token
  ticktick-mcp:
    <<: *ticktick-base
    env_file:
      - ../.env               # load main .env file
    environment:
      TICKTICK_CLIENT_ID: ${TICKTICK_CLIENT_ID}
      TICKTICK_CLIENT_SECRET: ${TICKTICK_CLIENT_SECRET}
      TICKTICK_ACCESS_TOKEN: ${TICKTICK_ACCESS_TOKEN:-}  # will be set after auth
    ports:
      - "${TICKTICK_SERVER_PORT:-8150}:8150"          # expose the MCP server port
    command: ["npm", "run", "start:server"]  # start the MCP server
    restart: unless-stopped
    networks:
      - admonish-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8150/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Python Bot Service
  # bot:
  #   build:
  #     context: ..
  #     dockerfile: infra/Dockerfile.bot
  #   container_name: admonish-bot
  #   ports:
  #     - "8000:8000"  # FastAPI calendar webhook server
  #     - "3001:3000"  # Slack Bot port (if needed) - changed to avoid conflict
  #   environment:
  #     - PYTHONPATH=/app/src
  #     - MCP_ENDPOINT=http://calendar-mcp:${PORT}
  #     - TICKTICK_MCP_ENDPOINT=http://ticktick-mcp:${TICKTICK_SERVER_PORT}
  #     - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
  #     - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - CALENDAR_WEBHOOK_SECRET=${CALENDAR_WEBHOOK_SECRET}
  #   env_file:
  #     - ../.env  # Use the main .env file from project root (relative to docker-compose.yml)
  #   volumes:
  #     - ../logs:/app/logs
  #   networks:
  #     - admonish-network
  #   depends_on:
  #     calendar-mcp:
  #       condition: service_healthy
  #     ticktick-mcp:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # # Development service (for local development)
  # dev:
  #   build:
  #     context: ..
  #     dockerfile: infra/Dockerfile.bot
  #   container_name: admonish-dev
  #   ports:
  #     - "8001:8000"  # Different port for dev
  #     - "3002:3000"  # Different port for dev
  #   environment:
  #     - PYTHONPATH=/app/src
  #     - MCP_ENDPOINT=http://calendar-mcp:${PORT}
  #     - DEVELOPMENT=true
  #   env_file:
  #     - ../.env  # Use root .env for consistency
  #   volumes:
  #     - ../src:/app/src  # Mount source for live reloading
  #     - ../tests:/app/tests
  #     - ../logs:/app/logs
  #     - poetry-cache:/root/.cache/pypoetry
  #   networks:
  #     - admonish-network
  #   depends_on:
  #     - calendar-mcp
  #   command: /bin/bash
  #   stdin_open: true
  #   tty: true

networks:
  admonish-network:
    driver: bridge

volumes:
  ticktick-token:
    driver: local
  ticktick-mcp-env:
    driver: local
  calendar-mcp-tokens:
    driver: local
  poetry-cache:
    driver: local